//------------------------------------------------
// The Geant4 Virtual Monte Carlo package
// Copyright (C) 2007 - 2014 Ivana Hrivnacova
// All rights reserved.
//
// For the licensing terms see geant4_vmc/LICENSE.
// Contact: root-vmc@cern.ch
//-------------------------------------------------

/// \file TG4TrackInformation.icc
/// \brief Implementation of the inline functions for the TG4TrackInformation
/// class
///
/// \author I. Hrivnacova; IPN Orsay

#include "TMCParticleStatus.h"

/// Geant4 allocator for TG4TrackInformation objects
extern G4ThreadLocal G4Allocator<TG4TrackInformation>* gTrackInfoAllocator;

inline void* TG4TrackInformation::operator new(size_t)
{
  /// Override "new" for "G4Allocator".

  if (!gTrackInfoAllocator) {
    gTrackInfoAllocator = new G4Allocator<TG4TrackInformation>;
  }

  void* trackInfo;
  trackInfo = (void*)(*gTrackInfoAllocator).MallocSingle();
  return trackInfo;
}

inline void TG4TrackInformation::operator delete(void* trackInfo)
{
  /// Override "delete" for "G4Allocator".

  (*gTrackInfoAllocator).FreeSingle((TG4TrackInformation*)trackInfo);
}

// inline methods

inline void TG4TrackInformation::SetTrackParticleID(G4int trackParticleID)
{
  /// Set track particle ID.= the index of track particle in VMC stack
  fTrackParticleID = trackParticleID;
}

inline void TG4TrackInformation::SetParentParticleID(G4int parentParticleID)
{
  /// Set parent particle ID = the index of parent particle in VMC stack
  fParentParticleID = parentParticleID;
}

inline void TG4TrackInformation::SetPDGLifetime(G4double pdgLifeTime)
{
  /// Set the PDG lifetime, if not yet done for this track.
  /// Do nothing if called for the second time.
  if (fPDGLifetime < 0) fPDGLifetime = pdgLifeTime;
}

inline void TG4TrackInformation::SetPDGEncoding(G4int pdgEncoding)
{
  /// Set the PDG encoding.
  fPDGEncoding = pdgEncoding;
}

inline void TG4TrackInformation::SetInitialTrackStatus(
  TMCParticleStatus* status)
{
  /// set initial status of the particle on the VMC stack all at once
  fInitialTrackStatus = status;
}

inline void TG4TrackInformation::SetIsUserTrack(G4bool isUserTrack)
{
  /// Set info that the track was poped from the VMC stack
  fIsUserTrack = isUserTrack;
}

inline void TG4TrackInformation::SetStop(G4bool stop)
{
  /// Set info that the track should be stopped
  fStop = stop;
}

inline void TG4TrackInformation::SetInterrupt(G4bool interrupt)
{
  /// Set info if the track should be interrupted so no hooks like
  /// TVirtualMCApplication::PostTrack() are called.
  fInterrupt = interrupt;
}

inline G4int TG4TrackInformation::GetTrackParticleID() const
{
  /// Return track particle ID.= the index of track particle in VMC stack
  return fTrackParticleID;
}

inline G4int TG4TrackInformation::GetParentParticleID() const
{
  /// Return parent particle ID = the index of parent particle in VMC stack
  return fParentParticleID;
}

inline G4double TG4TrackInformation::GetPDGLifetime() const
{
  /// Return the original PDG lifetime for this track
  return fPDGLifetime;
}

inline G4int TG4TrackInformation::GetPDGEncoding() const
{
  /// Return the PDG encoding for this track
  return fPDGEncoding;
}

inline const TMCParticleStatus*
TG4TrackInformation::GetInitialTrackStatus() const
{
  return fInitialTrackStatus;
}

inline G4bool TG4TrackInformation::IsUserTrack() const
{
  /// Return the info if the track was poped from the VMC stack
  return fIsUserTrack;
}

inline G4bool TG4TrackInformation::IsStop() const
{
  /// Return the info if the track should be stopped
  return fStop;
}

inline G4bool TG4TrackInformation::IsInterrupt() const
{
  /// Return the info if the track should be interrupted so no hooks like
  /// TVirtualMCApplication::PostTrack() are called.
  return fInterrupt;
}
